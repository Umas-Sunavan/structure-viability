{"version":3,"sources":["serviceWorker.js","FullPager.js","index.js"],"names":["Boolean","window","location","hostname","match","lastSrollTime","lastSucesScreenMovedTime","Date","getTime","currentDeltaY","undefined","lastTouchLocationY","address","defaultLandingPageName","FullPager","props","componentDidMount","validifyAnchorName","getAnchorName","link","hasAnchor","substring","lastIndexOf","length","isAnchorNameValid","state","currentPageAnchorName","setState","moveWrapper","changeAddressByAnchor","anchorName","isValid","sectionContent","forEach","v","i","id","changeScrollBehavior","fullPager","addEventListener","event","preventDefault","stablizeScroll","passive","stablizeScreenTouch","timeNow","touchQuietPeriod","animationTime","deltaY","onStableScroll","currentTouchedY","changedTouches","item","clientY","distence","istTimeToMove","scrollQuietPeriod","touchStableConstantNumber","isMoveUp","console","log","onStableScreenTouch","thisAnchorName","convertPageIndexToAnchorName","convertAnchorNameToIndex","changeAnchorNameAndAddress","_getIsDirectionUp","currentPageIndex","findingIndex","getCurrentPageIndex","targetAnchorName","index","anchorIndex","assign","getRootAddress","toString","includes","fromName","toName","text","bgColor","pagerDistance","this","style","transform","map","className","key","vv","ii","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84512558.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './fullPager.scss';\n\n\nlet lastSrollTime = 0\nlet lastSucesScreenMovedTime = new Date().getTime();\nlet currentDeltaY = undefined\nlet lastTouchLocationY = undefined\nlet address = window.location\nlet defaultLandingPageName = 'hero'\n\nclass FullPager extends Component {\n\n    constructor(props) {\n        super(props)\n        this.changeScrollBehavior()\n        this.state = {\n            sectionContent: [\n                { id: defaultLandingPageName, text: \"One\", bgColor: \"#3399ee\" },\n                { id: \"f\", text: \"Two\", bgColor: \"#ee3399\" },\n                { id: \"ai\", text: \"Three\", bgColor: \"#33ee99\" },\n                { id: \"coe\", text: \"Four\", bgColor: \"#339999\" },\n                { id: \"footer\", text: \"Five\", bgColor: \"#999933\" }\n            ],\n            touchQuietPeriod: 0,\n            scrollQuietPeriod: 0,\n            animationTime: 1000,\n            touchStableConstantNumber: 2,\n            currentPageAnchorName: this.getAnchorName(address.toString()),\n        }\n        this.moveWrapper(defaultLandingPageName, this.state.currentPageAnchorName)\n\n    }\n\n    componentDidMount = () => {\n        this.validifyAnchorName()\n    }\n\n    getAnchorName = (link) => {\n        let anchorName\n        if (this.hasAnchor(link)) {\n            anchorName = link.substring(link.lastIndexOf('#') + 1, link.length)\n        } else {\n            anchorName = defaultLandingPageName\n        }\n        return anchorName\n    }\n\n    validifyAnchorName = () => {\n        if (!this.isAnchorNameValid(this.state.currentPageAnchorName)) {\n            this.setState({ currentPageAnchorName: defaultLandingPageName }, () => {\n                this.moveWrapper(defaultLandingPageName, this.state.currentPageAnchorName)\n                this.changeAddressByAnchor(defaultLandingPageName)\n            })\n        }\n\n    }\n\n    isAnchorNameValid = (anchorName) => {\n        let isValid\n        this.state.sectionContent.forEach((v, i) => {\n            if (anchorName === v.id) {\n                isValid = true\n            }\n        })\n        return isValid || false\n    }\n\n    changeScrollBehavior = () => {\n        let fullPager = this\n        window.addEventListener('wheel', function (event) {\n            event.preventDefault()\n            fullPager.stablizeScroll(event)\n        }, { passive: false })\n        window.addEventListener('touchmove', function (event) {\n            event.preventDefault()\n            fullPager.stablizeScreenTouch(event)\n        }, { passive: false })\n    }\n\n    stablizeScroll = (event) => {\n        let timeNow = new Date().getTime();\n        let enableScrolling = Boolean(timeNow - lastSrollTime > (this.state.touchQuietPeriod + this.state.animationTime));\n        if (enableScrolling) {\n            currentDeltaY = event.deltaY\n            lastSrollTime = timeNow\n            this.onStableScroll()\n        }\n    }\n\n    stablizeScreenTouch = (event) => {\n        let timeNow = new Date().getTime()\n        let currentTouchedY = event.changedTouches.item(0).clientY\n        let distence = currentTouchedY - lastTouchLocationY\n        let istTimeToMove = Boolean(timeNow - lastSucesScreenMovedTime > (this.state.scrollQuietPeriod + this.state.animationTime))\n        let isStablizedDistance = distence >= this.state.touchStableConstantNumber || distence <= -this.state.touchStableConstantNumber\n        let _setLastTouchLocation = () => { lastTouchLocationY = istTimeToMove ? currentTouchedY : undefined }\n        let _setLastTouchTime = () => lastSucesScreenMovedTime = timeNow\n        let _resetDistance = () => distence = 0\n        if (isStablizedDistance && istTimeToMove) {\n            let isMoveUp = (distence < 0) ? -1 : 1\n            console.log(distence);\n            _resetDistance()\n            _setLastTouchTime()\n            this.onStableScreenTouch(isMoveUp)\n        }\n        _setLastTouchLocation()\n    }\n\n    onStableScreenTouch = (isMoveUp) => {\n        let thisAnchorName = this.state.currentPageAnchorName\n        this.moveWrapper(thisAnchorName, this.convertPageIndexToAnchorName(this.convertAnchorNameToIndex(thisAnchorName) - isMoveUp) || thisAnchorName)\n\n        this.changeAnchorNameAndAddress(isMoveUp)\n    }\n\n    onStableScroll = () => {\n        let _getIsDirectionUp = () => {\n            return (currentDeltaY !== 0) ? ((currentDeltaY < 0) ? 1 : -1) : 0\n        }\n        let thisAnchorName = this.state.currentPageAnchorName\n        this.moveWrapper(thisAnchorName, this.convertPageIndexToAnchorName(this.convertAnchorNameToIndex(thisAnchorName) - _getIsDirectionUp()) || thisAnchorName)\n        this.changeAnchorNameAndAddress(_getIsDirectionUp())\n    }\n\n    changeAnchorNameAndAddress = (isMoveUp) => {\n        let getCurrentPageIndex = () => {\n            let findingIndex\n            this.state.sectionContent.forEach((v, i) => {\n                if (this.state.currentPageAnchorName === v.id) {\n                    findingIndex = i\n                }\n            })\n            return findingIndex\n        }\n\n        let currentPageIndex = getCurrentPageIndex()\n        let targetAnchorName = this.convertPageIndexToAnchorName(currentPageIndex - isMoveUp) || this.convertPageIndexToAnchorName(currentPageIndex)\n        this.setState({ currentPageAnchorName: targetAnchorName }, () => {\n            this.changeAddressByAnchor(this.state.currentPageAnchorName)\n            console.log(this.state.currentPageAnchorName);\n        })\n    }\n\n    convertPageIndexToAnchorName = (index) => {\n        let anchorName\n        this.state.sectionContent.forEach((v, i) => {\n            if (index === i) {\n                anchorName = v.id\n            }\n        })\n        return anchorName\n    }\n\n    convertAnchorNameToIndex = (anchorName) => {\n        let anchorIndex\n        this.state.sectionContent.forEach((v, i) => {\n            if (anchorName === v.id) {\n                anchorIndex = i\n            }\n        })\n        return anchorIndex\n    }\n\n    changeAddressByAnchor = (anchorName) => {\n        address.assign(this.getRootAddress(address.toString()) + '#' + anchorName)\n    }\n\n    getRootAddress = (link) => {\n        return this.hasAnchor(link) ? link.substring(0, link.lastIndexOf('#')) : link\n\n    }\n\n    hasAnchor = (link) => {\n        return link.includes(\"#\")\n    }\n\n    moveWrapper = (fromName, toName) => {\n        console.log('move from: ' + fromName + ' to ' + toName);\n\n    }\n\n\n    render() {\n        let pageIndex = this.convertAnchorNameToIndex(this.state.currentPageAnchorName)\n        let pagerDistance = pageIndex * -100\n        return (\n            <div id={\"pagerContainer\"} >\n                <div id={\"pageWrapper\"} style={{ transform: 'translateY(' + pagerDistance + 'vh)' }}>\n                    {\n                        this.state.sectionContent.map((v, i) => {\n                            return (\n                                <section className=\"section\" id={'section-' + v.id} key={i}>\n                                    <h2>{v.id}</h2>\n                                    {this.state.sectionContent.map((vv, ii) => {\n                                        return (<h2 id={v.id + '-to-' + vv.id} key={i + '-' + ii}>{vv.text}</h2>)\n                                    })}\n                                </section>)\n                        })\n                    }\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default FullPager;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FullPager from './FullPager';\n\n\nReactDOM.render(<FullPager/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}