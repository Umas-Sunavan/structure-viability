{"version":3,"sources":["logo.svg","AppForAlt.js","serviceWorker.js","FullPager.js","index.js"],"names":["module","exports","Component","Boolean","window","location","hostname","match","lastSrollTime","lastSucesScreenMovedTime","Date","getTime","currentDeltaY","undefined","lastTouchLocationY","isScrollDirestionUp","FullPager","props","componentWillMount","changeScrollBehavior","fullPager","addEventListener","event","preventDefault","stablizeScroll","passive","stablizeScreenTouch","timeNow","state","touchQuietPeriod","animationTime","deltaY","onStableScroll","currentTouchedY","changedTouches","item","clientY","distence","istTimeToMove","scrollQuietPeriod","touchStableConstantNumber","isMoveUp","console","log","onStableScreenTouch","moveNextLocation","getIsDirectionUp","getSections","sectionArray","sectionContent","forEach","section","push","sections","id","text","bgColor","this","map","value","index","className","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,kNCIzBC,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCbFC,G,MAAgB,GAChBC,GAA2B,IAAIC,MAAOC,UACtCC,OAAgBC,EAChBC,OAAqBD,EACrBE,EAAsB,EAoHXC,E,YA5GX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KALVC,mBAAqB,aAIF,EAkBnBC,qBAAuB,WACnB,IAAIC,EAAS,eACbhB,OAAOiB,iBAAiB,SAAS,SAAUC,GACvCA,EAAMC,iBACNH,EAAUI,eAAeF,KAC1B,CAAEG,SAAS,IACdrB,OAAOiB,iBAAiB,aAAa,SAAUC,GAC3CA,EAAMC,iBACNH,EAAUM,oBAAoBJ,KAC/B,CAAEG,SAAS,KA3BC,EA8BnBD,eAAiB,SAACF,GACd,IAAIK,GAAU,IAAIjB,MAAOC,UACHR,QAAQwB,EAAUnB,EAAiB,EAAKoB,MAAMC,iBAAmB,EAAKD,MAAME,iBAE9FlB,EAAgBU,EAAMS,OACtBvB,EAAgBmB,EAChB,EAAKK,mBApCM,EAwCnBN,oBAAsB,SAACJ,GACnB,IAAIK,GAAU,IAAIjB,MAAOC,UACrBsB,EAAkBX,EAAMY,eAAeC,KAAK,GAAGC,QAC/CC,EAAWJ,EAAkBnB,EAC7BwB,EAAgBnC,QAAQwB,EAAUlB,EAA4B,EAAKmB,MAAMW,kBAAoB,EAAKX,MAAME,eAM5G,IAL0BO,GAAY,EAAKT,MAAMY,2BAA6BH,IAAa,EAAKT,MAAMY,4BAK3EF,EAAe,CACtC,IAAIG,EAAYJ,EAAW,GAAM,EAAI,EACrCK,QAAQC,IAAIN,GAJWA,EAAW,EADR5B,EAA2BkB,EASrD,EAAKiB,oBAAoBH,GAVM3B,EAAqBwB,EAAeL,OAAkBpB,GA9C1E,EA8DnB+B,oBAAsB,SAACH,GACnB,EAAKI,iBAAiBJ,IA/DP,EAkEnBT,eAAiB,WACbjB,EAAsB,EAAK+B,mBAC3B,EAAKD,iBAAiB9B,IApEP,EAuEnB8B,iBAAmB,SAACJ,GAChBC,QAAQC,IAAIF,IAxEG,EA2EnBK,iBAAmB,WACf,OAA0B,IAAlBlC,EAAyBA,EAAgB,EAAK,GAAK,EAAK,GA5EjD,EA+EnBmC,YAAc,WACV,IAAIC,EAAe,GACnB,EAAKpB,MAAMqB,eAAeC,SACtB,SAACD,GACG,IAAIE,EAAW,iCAAUF,GACzBD,EAAaI,KAAKD,GAClBT,QAAQC,IAAIK,MAGpB,IAAIK,EAAY,6BAAML,GAGtB,OAFAN,QAAQC,IAAIU,GAELL,GAzFP,EAAK7B,uBACL,EAAKS,MAAQ,CACTqB,eAAgB,CACZ,CAAEK,GAAI,OAAQC,KAAM,MAAOC,QAAS,WACpC,CAAEF,GAAI,IAAKC,KAAM,MAAOC,QAAS,WACjC,CAAEF,GAAI,KAAMC,KAAM,QAASC,QAAS,WACpC,CAAEF,GAAI,MAAOC,KAAM,OAAQC,QAAS,WACpC,CAAEF,GAAI,SAAUC,KAAM,OAAQC,QAAS,YAE3C3B,iBAAkB,EAClBU,kBAAmB,EACnBT,cAAe,KACfU,0BAA2B,GAdhB,E,sEA+Ff,OACI,yBAAKc,GAAI,kBAEDG,KAAK7B,MAAMqB,eAAeS,KAAI,SAACC,EAAOC,GAClC,OAAQ,6BAASC,UAAU,UAAUP,GAAI,WAAaK,EAAML,GAAIQ,IAAKF,GAAO,4BAAKD,EAAMJ,e,GAzGvFrD,aCHxB6D,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SFyHhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.298402b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\n    componentWillMount = () => {\n    }\n\n    constructor(props) {\n        super(props)\n        this.state = {\n        }\n    }\n\n\n    handleJumpACardRequestFromMenu = () => {\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        AppAlt\n                    </a>\n                </header>\n            </div>\n        )\n    }\n\n}\n\n// function App() {\n//   return (\n// {/* <div className=\"App\">\n//   <header className=\"App-header\">\n//     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//     <p>\n//       Edit <code>src/App.js</code> and save to reload.\n//     </p>\n//     <a\n//       className=\"App-link\"\n//       href=\"https://reactjs.org\"\n//       target=\"_blank\"\n//       rel=\"noopener noreferrer\"\n//     >\n//       Learn React\n//     </a>\n//   </header>\n// </div> */}\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './fullPager.scss';\n\n\nlet lastSrollTime = 0\nlet lastSucesScreenMovedTime = new Date().getTime();\nlet currentDeltaY = undefined\nlet lastTouchLocationY = undefined\nlet isScrollDirestionUp = 0\n\nclass FullPager extends Component {\n\n    componentWillMount = () => {\n        \n    }\n\n    constructor(props) {\n        super(props)\n        this.changeScrollBehavior()\n        this.state = {\n            sectionContent: [\n                { id: \"hero\", text: \"One\", bgColor: \"#3399ee\" },\n                { id: \"f\", text: \"Two\", bgColor: \"#ee3399\" },\n                { id: \"ai\", text: \"Three\", bgColor: \"#33ee99\" },\n                { id: \"coe\", text: \"Four\", bgColor: \"#339999\" },\n                { id: \"footer\", text: \"Five\", bgColor: \"#999933\" }\n            ],\n            touchQuietPeriod: 0,\n            scrollQuietPeriod: 0,\n            animationTime: 1500,\n            touchStableConstantNumber: 2\n        }\n    }\n\n    changeScrollBehavior = () => {\n        let fullPager = this\n        window.addEventListener('wheel', function (event) {\n            event.preventDefault()\n            fullPager.stablizeScroll(event)\n        }, { passive: false })\n        window.addEventListener('touchmove', function (event) {\n            event.preventDefault()\n            fullPager.stablizeScreenTouch(event)\n        }, { passive: false })\n    }\n\n    stablizeScroll = (event) => {\n        let timeNow = new Date().getTime();\n        let enableScrolling = Boolean(timeNow - lastSrollTime < (this.state.touchQuietPeriod + this.state.animationTime));\n        if (!enableScrolling) {\n            currentDeltaY = event.deltaY\n            lastSrollTime = timeNow\n            this.onStableScroll()\n        }\n    }\n\n    stablizeScreenTouch = (event) => {\n        let timeNow = new Date().getTime()\n        let currentTouchedY = event.changedTouches.item(0).clientY\n        let distence = currentTouchedY - lastTouchLocationY\n        let istTimeToMove = Boolean(timeNow - lastSucesScreenMovedTime > (this.state.scrollQuietPeriod + this.state.animationTime))\n        let isStablizedDistance = distence >= this.state.touchStableConstantNumber || distence <= -this.state.touchStableConstantNumber\n        let _setLastTouchLocation = () => {lastTouchLocationY = istTimeToMove? currentTouchedY : undefined}\n        let _setLastTouchTime = () => lastSucesScreenMovedTime = timeNow\n        let _resetDistance = () => distence = 0\n\n        if (isStablizedDistance && istTimeToMove) {\n            let isMoveUp = (distence < 0) ? -1 : 1\n            console.log(distence);\n            \n            _resetDistance()\n            _setLastTouchTime()\n            this.onStableScreenTouch(isMoveUp)\n        }\n\n        _setLastTouchLocation()\n    }\n\n    onStableScreenTouch = (isMoveUp) => {\n        this.moveNextLocation(isMoveUp)\n    }\n\n    onStableScroll = () => {\n        isScrollDirestionUp = this.getIsDirectionUp()\n        this.moveNextLocation(isScrollDirestionUp)\n    }\n\n    moveNextLocation = (isMoveUp) => {\n        console.log(isMoveUp);\n    }\n\n    getIsDirectionUp = () => {\n        return (currentDeltaY !== 0) ? ((currentDeltaY < 0) ? 1 : -1) : 0\n    }\n\n    getSections = () => {\n        let sectionArray = []\n        this.state.sectionContent.forEach(\n            (sectionContent) => {\n                let section = (<section>{sectionContent}</section>)\n                sectionArray.push(section)\n                console.log(sectionArray);\n\n            })\n        let sections = (<div>{sectionArray}</div>)\n        console.log(sections);\n\n        return sectionArray\n    }\n\n    render() {\n        return (\n            <div id={\"pagerContainer\"}>\n                {\n                    this.state.sectionContent.map((value, index) => {\n                        return (<section className=\"section\" id={\"section-\" + value.id} key={index}><h2>{value.text}</h2></section>)\n                    })\n                }\n            </div>\n        )\n    }\n\n}\n\nexport default FullPager;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppForAlt from './AppForAlt';\nimport * as serviceWorker from './serviceWorker';\nimport FullPager from './FullPager';\n\n\nReactDOM.render(<FullPager/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}