{"version":3,"sources":["serviceWorker.js","FullPager.js","FadeInText.js","SplashScreen.js","F.js","AI.js","Coe.js","play.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","lastSrollTime","lastSucesScreenMovedTime","Date","getTime","currentDeltaY","undefined","lastTouchLocationY","address","defaultLandingPageName","FadeInText","Component","props","componentDidMount","delaySpans","presentSpans","delay","i","state","origionalText","toString","letter","push","key","id","style","animationDelay","MozAnimationDelay","WebkitAnimationDelay","letterEachDelay","setState","innerText","animationType","setTimeout","this","className","play","pathname","node","appears","console","log","timeline","Timeline","paused","document","body","querySelector","querySelectorAll","texts","from","display","autoAlpha","staggerFrom","x","ease","Power1","easeOut","getHomeTimeline","App","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","to","activeClassName","exact","Button","variant","render","TransitionGroup","component","Transition","appear","onEnter","onExit","exit","timeout","enter","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90b3fe2d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport './fullPager.scss';\nimport SVG from 'svg.js';\n\nlet lastSrollTime = 0\nlet lastSucesScreenMovedTime = new Date().getTime();\nlet currentDeltaY = undefined\nlet lastTouchLocationY = undefined\nlet address = window.location\nlet defaultLandingPageName = 'hero'\n\nclass FullPager extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            sectionContent: [\n                { id: defaultLandingPageName, text: \"One\", bgColor: \"#3399ee\" },\n                { id: \"f\", text: \"Two\", bgColor: \"#ee3399\" },\n                { id: \"ai\", text: \"Three\", bgColor: \"#33ee99\" },\n                { id: \"coe\", text: \"Four\", bgColor: \"#339999\" },\n                { id: \"footer\", text: \"Five\", bgColor: \"#999933\" }\n            ],\n            touchQuietPeriod: 0,\n            scrollQuietPeriod: 0,\n            animationTime: 1000,\n            touchStableConstantNumber: 2,\n            currentPageAnchorName: this.getAnchorName(address.toString()),\n            isLoading: true,\n            height: window.innerHeight,\n            width: window.innerWidth\n        }\n        console.log(this.state.height);\n\n    }\n\n    componentDidMount = () => {\n        this.validifyAnchorName()\n        this.setState({ isLoading: false })\n        this.moveWrapper(defaultLandingPageName, this.state.currentPageAnchorName)\n        this.addEventListeners()\n\n\n        let AllFramesWidth = 51.7 + 14.6 + 51.7 + 36.8 + 26.346\n\n        let uFrameWidth = 51.7\n        let uFrameHeight = 97.3\n        let uiIFrameWidth = 14.6\n        let iFrameHeight = 99.2\n        let xFrameWidth = 36.8\n        let xFrameHeight = 99.5\n\n        let coveredTail = 19\n\n        let uFrameRatio = uFrameWidth / uFrameHeight\n        let uFrameWidthPercent = uFrameWidth / AllFramesWidth * 100\n        let iFrameRatio = uiIFrameWidth / iFrameHeight\n        let iFrameWidthPercent = uiIFrameWidth / AllFramesWidth * 100\n        let xFrameRatio = xFrameWidth / xFrameHeight\n        let xFrameWidthPercent = xFrameWidth / AllFramesWidth * 100\n\n        let lowerU1Frame = this.createU1Frame('lowerText', uFrameWidthPercent, uFrameRatio, uFrameWidth, uFrameHeight, coveredTail, coveredTail, 'lowerU1Frame');\n        let lowerIFrame = this.createIFrame('lowerText', iFrameWidthPercent, iFrameRatio, uiIFrameWidth, iFrameHeight, coveredTail, coveredTail, 'lowerIFrame');\n        let lowerI2Frame = this.createU2Frame('lowerText', uFrameWidthPercent, uFrameRatio, uFrameWidth, uFrameHeight, coveredTail, coveredTail, 'lowerI2Frame');\n        let lowerXFrame = this.createXFrame('lowerText', xFrameWidthPercent, xFrameRatio, xFrameWidth, xFrameHeight, coveredTail, coveredTail, 'lowerXFrame ');\n\n        let getLowerU1LeftClipShape = lowerU1Frame.get(0).get(0).get(0)\n        let getLowerU1RightClipShape = lowerU1Frame.get(0).get(1).get(0)\n        let getLowerIClipShape = lowerIFrame.get(0).get(0).get(0)\n        let geLowerU2LeftClipShape = lowerI2Frame.get(0).get(0).get(0)\n        let getLowerU2RightClipShape = lowerI2Frame.get(0).get(1).get(0)\n        let getLowerXFowardSlashClipShape = lowerXFrame.get(0).get(0).get(0)\n        let getLowerXBackSlashClipShape = lowerXFrame.get(0).get(1).get(0)\n        let getLowerXFowardSlashText = lowerXFrame.get(1)\n        let getLowerXBackSlashText = lowerXFrame.get(2)\n\n\n        getLowerU1LeftClipShape.animate().height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerU1LeftClipShape.animate().move(0, 0).height(uFrameHeight)\n            })\n        getLowerU1RightClipShape.animate().height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerU1RightClipShape.animate().move(25.8, 0).height(uFrameHeight)\n            })\n        getLowerIClipShape.animate().height(iFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerIClipShape.animate().move(0, 0).height(uFrameHeight)\n            })\n        geLowerU2LeftClipShape.animate().height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                geLowerU2LeftClipShape.animate().move(0, 0).height(uFrameHeight)\n            })\n        getLowerU2RightClipShape.animate().height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerU2RightClipShape.animate().move(25.8, 0).height(uFrameHeight)\n            })\n        getLowerXFowardSlashClipShape.animate().height(xFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerXFowardSlashClipShape.animate().move(0, 3).height(xFrameHeight).rotate(13.5)\n                getLowerXFowardSlashText.animate().rotate(-13.5)\n            })\n        getLowerXBackSlashClipShape.animate().height(xFrameHeight - coveredTail)\n            .after((situation) => {\n                getLowerXBackSlashClipShape.animate().move(0, 3).height(xFrameHeight).rotate(-15)\n                getLowerXBackSlashText.animate().rotate(15)\n                lowerXFrame.animate().style({ bottom: '1.75vw' })\n            })\n\n\n        // let lowerU1Frame = this.lowerU1Frame(uFrameWidthPercent, uFrameRatio, uFrameWidth, uFrameHeight, coveredTail)\n        // lowerU1Frame.animate().height(xFrameHeight - coveredTail)\n\n        let upperU1Frame = this.createU1Frame('upperText', uFrameWidthPercent, uFrameRatio, uFrameWidth, uFrameHeight, coveredTail, uFrameHeight - coveredTail,'upperU1Frame');\n        let upperIFrame = this.createIFrame('upperText', iFrameWidthPercent, iFrameRatio, uiIFrameWidth, iFrameHeight, coveredTail, iFrameHeight - coveredTail,'upperIFrame');\n        let upperU2Frame = this.createU2Frame('upperText', uFrameWidthPercent, uFrameRatio, uFrameWidth, uFrameHeight, coveredTail, uFrameHeight - coveredTail,'upperU2Frame');\n        let upperXFrame = this.createXFrame('upperText', xFrameWidthPercent, xFrameRatio, xFrameWidth, xFrameHeight, coveredTail, xFrameHeight - coveredTail,'upperXFrame');\n\n        let getUpperU1LeftClipShape = upperU1Frame.get(0).get(0).get(0)\n        let getUpperU1RightClipShape = upperU1Frame.get(0).get(1).get(0)\n        let getUpperIClipShape = upperIFrame.get(0).get(0).get(0)\n        let geUpperU2LeftClipShape = upperU2Frame.get(0).get(0).get(0)\n        let getUpperU2RightClipShape = upperU2Frame.get(0).get(1).get(0)\n        let getUpperXFowardSlashClipShape = upperXFrame.get(0).get(0).get(0)\n        let getUpperXBackSlashClipShape = upperXFrame.get(0).get(1).get(0)\n        let getUpperXFowardSlashText = upperXFrame.get(1)\n        let getUpperXBackSlashText = upperXFrame.get(2)\n\n        getUpperU1LeftClipShape.animate().move(0, 0).height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperU1LeftClipShape.animate().height(uFrameHeight * 0.967)\n            })\n        getUpperU1RightClipShape.animate().move(25.8, 0).height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperU1RightClipShape.animate().height(uFrameHeight * 0.967)\n            })\n        getUpperIClipShape.animate().move(0, 0).height(iFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperIClipShape.animate().height(uFrameHeight)\n            })\n        geUpperU2LeftClipShape.animate().move(0, 0).height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                geUpperU2LeftClipShape.animate().height(uFrameHeight * 0.967)\n            })\n        getUpperU2RightClipShape.animate().move(25.8, 0).height(uFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperU2RightClipShape.animate().height(uFrameHeight * 0.967)\n            })\n        getUpperXFowardSlashClipShape.animate().move(10, 0).height(xFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperXFowardSlashClipShape.animate().height(xFrameHeight).rotate(13.5)\n                getUpperXFowardSlashText.animate().rotate(-13.5)\n            })\n        getUpperXBackSlashClipShape.animate().move(-10, 0).height(xFrameHeight - coveredTail)\n            .after((situation) => {\n                getUpperXBackSlashClipShape.animate().height(xFrameHeight).rotate(-15)\n                getUpperXBackSlashText.animate().rotate(15)\n                upperXFrame.style({ bottom: '1.75vw' })\n                // upperXFrame.animate()\n            })\n\n        // upperXFrame.get(3).animate().move(0, 0).height(xFrameHeight - coveredTail)\n        // .after((situation) => {\n        //     upperXFrame.get(3).animate().move(0, 0).height(xFrameHeight)\n        // })\n\n        // upperXFrame.get(4).animate().move(0, 0).height(xFrameHeight - coveredTail)\n        // .after((situation) => {\n        //     upperXFrame.get(4).animate().move(0, 0).height(xFrameHeight)\n        // })\n    }\n\n    createU1Frame = (parentId, uiUFrameWidthPercent, uiUFrameRatio, uiUFrameWidth, uiUFrameHeight, coveredTail, moveFrom, id) => {\n        let uiU1Frame = SVG(parentId).size(uiUFrameWidthPercent + 'vw', uiUFrameWidthPercent / uiUFrameRatio + 'vw').viewbox({ x: 0, y: 0, width: uiUFrameWidth, height: uiUFrameHeight }).attr({ 'id': id , 'class': 'u1Frame'});\n\n        let uiU1ClipShape = uiU1Frame.rect(25.8, 0).move(0, moveFrom)\n        let uiU1TextLeft = uiU1Frame.path('M12.9,77.2V4.8c0-1.5-0.2-2.5-0.7-2.8s-1.5-0.5-3.2-0.6l0-1.2h13.6v1.2h-1.3c-1.3,0-2.1,0.2-2.5,0.6c-0.4,0.4-0.5,1.2-0.5,2.6v78c0,2.8,0.9,5.1,2.7,6.9c1.8,1.8,4.1,2.7,7,2.7c3.6,0,6.4-1.1,8.1-3.4c1.8-2.3,2.7-5.7,2.7-10.3V6.2c0-1.9-0.3-3.2-0.8-3.9s-1.5-1-2.9-1H34V0.1h10.8v1.2h-1c-1.3,0-2.1,0.3-2.6,1c-0.5,0.7-0.8,2-0.8,3.9V79c0,4.9-1.1,8.5-3.4,10.9c-2.3,2.4-5.7,3.6-10.3,3.6c-3,0-5.6-0.5-7.7-1.5c-2.1-1-3.6-2.4-4.5-4.2c-0.6-1.3-1-2.6-1.2-4C13,81.6,12.9,79.4,12.9,77.2z').fill('#F8F8FB');\n        uiU1TextLeft.clipWith(uiU1ClipShape);\n\n        let uiU2ClipShape = uiU1Frame.rect(25.8, 0).move(25.8, moveFrom)\n        let uiU1TextRight = uiU1Frame.path('M12.9,77.2V4.8c0-1.5-0.2-2.5-0.7-2.8s-1.5-0.5-3.2-0.6l0-1.2h13.6v1.2h-1.3c-1.3,0-2.1,0.2-2.5,0.6c-0.4,0.4-0.5,1.2-0.5,2.6v78c0,2.8,0.9,5.1,2.7,6.9c1.8,1.8,4.1,2.7,7,2.7c3.6,0,6.4-1.1,8.1-3.4c1.8-2.3,2.7-5.7,2.7-10.3V6.2c0-1.9-0.3-3.2-0.8-3.9s-1.5-1-2.9-1H34V0.1h10.8v1.2h-1c-1.3,0-2.1,0.3-2.6,1c-0.5,0.7-0.8,2-0.8,3.9V79c0,4.9-1.1,8.5-3.4,10.9c-2.3,2.4-5.7,3.6-10.3,3.6c-3,0-5.6-0.5-7.7-1.5c-2.1-1-3.6-2.4-4.5-4.2c-0.6-1.3-1-2.6-1.2-4C13,81.6,12.9,79.4,12.9,77.2z').fill('#F8F8FB');\n        uiU1TextRight.clipWith(uiU2ClipShape);\n\n        return uiU1Frame\n    }\n\n\n    createIFrame = (parentId, uiIFrameWidthPercent, uiIFrameRatio, uiIFrameWidth, uiIFrameHeight, coveredTail, moveFrom, id) => {\n        let uiIFrame = SVG(parentId).size(uiIFrameWidthPercent + 'vw', uiIFrameWidthPercent / uiIFrameRatio + 'vw').viewbox({ x: 0, y: 0, width: uiIFrameWidth, height: uiIFrameHeight * 1.026 }).attr({ 'id': id , 'class': 'iFrame'});\n\n        let uiIText = uiIFrame.path('M14.6,0v1.2h-1.1c-1.4,0-2.3,0.2-2.8,0.6s-0.6,1.3-0.6,2.7v86.8c0,1.5,0.2,2.4,0.6,2.8s1.4,0.5,3,0.5h0.9v1.2H0v-1.2h0.7c1.6,0,2.6-0.2,3.1-0.6s0.7-1.3,0.7-2.8V4.5c0-1.5-0.2-2.4-0.6-2.8C3.6,1.4,2.6,1.3,1,1.2H0V0H14.6z').fill('#F8F8FB');\n        uiIText.clipWith(uiIFrame.rect(uiIFrameWidth, 0).move(0, moveFrom));\n\n        return uiIFrame\n    }\n\n    createU2Frame = (parentId, uiUFrameWidthPercent, uiUFrameRatio, uiUFrameWidth, uiUFrameHeight, coveredTail, moveFrom, id) => {\n        let u2Frame = SVG(parentId).size(uiUFrameWidthPercent + 'vw', uiUFrameWidthPercent / uiUFrameRatio + 'vw').viewbox({ x: 0, y: 0, width: uiUFrameWidth, height: uiUFrameHeight }).attr({ 'id': id });\n\n        let u2LeftClipShape = u2Frame.rect(25.8, 0).move(0, moveFrom)\n        let u2TextLeft = u2Frame.path('M12.9,77.2V4.8c0-1.5-0.2-2.5-0.7-2.8s-1.5-0.5-3.2-0.6l0-1.2h13.6v1.2h-1.3c-1.3,0-2.1,0.2-2.5,0.6c-0.4,0.4-0.5,1.2-0.5,2.6v78c0,2.8,0.9,5.1,2.7,6.9c1.8,1.8,4.1,2.7,7,2.7c3.6,0,6.4-1.1,8.1-3.4c1.8-2.3,2.7-5.7,2.7-10.3V6.2c0-1.9-0.3-3.2-0.8-3.9s-1.5-1-2.9-1H34V0.1h10.8v1.2h-1c-1.3,0-2.1,0.3-2.6,1c-0.5,0.7-0.8,2-0.8,3.9V79c0,4.9-1.1,8.5-3.4,10.9c-2.3,2.4-5.7,3.6-10.3,3.6c-3,0-5.6-0.5-7.7-1.5c-2.1-1-3.6-2.4-4.5-4.2c-0.6-1.3-1-2.6-1.2-4C13,81.6,12.9,79.4,12.9,77.2z').fill('#F8F8FB');\n        u2TextLeft.clipWith(u2LeftClipShape);\n\n        let u2RightClipShape = u2Frame.rect(25.8, 0).move(25.8, moveFrom)\n        let u2TextRight = u2Frame.path('M12.9,77.2V4.8c0-1.5-0.2-2.5-0.7-2.8s-1.5-0.5-3.2-0.6l0-1.2h13.6v1.2h-1.3c-1.3,0-2.1,0.2-2.5,0.6c-0.4,0.4-0.5,1.2-0.5,2.6v78c0,2.8,0.9,5.1,2.7,6.9c1.8,1.8,4.1,2.7,7,2.7c3.6,0,6.4-1.1,8.1-3.4c1.8-2.3,2.7-5.7,2.7-10.3V6.2c0-1.9-0.3-3.2-0.8-3.9s-1.5-1-2.9-1H34V0.1h10.8v1.2h-1c-1.3,0-2.1,0.3-2.6,1c-0.5,0.7-0.8,2-0.8,3.9V79c0,4.9-1.1,8.5-3.4,10.9c-2.3,2.4-5.7,3.6-10.3,3.6c-3,0-5.6-0.5-7.7-1.5c-2.1-1-3.6-2.4-4.5-4.2c-0.6-1.3-1-2.6-1.2-4C13,81.6,12.9,79.4,12.9,77.2z').fill('#F8F8FB');\n        u2TextRight.clipWith(u2RightClipShape);\n\n        return u2Frame\n    }\n\n\n    createXFrame = (parentId, uiXFrameWidthPercent, uiXFrameRatio, uiXFrameWidth, uiXFrameHeight, coveredTail, moveFrom, id) => {\n        let uiXFrame = SVG(parentId).size(uiXFrameWidthPercent + 'vw', uiXFrameWidthPercent / uiXFrameRatio + 'vw').viewbox({ x: 0, y: 0, width: uiXFrameWidth, height: uiXFrameHeight }).attr({ 'id': id });\n\n        let xFowardSlashClipShape = uiXFrame.rect(uiXFrameWidth, 0).move(0, moveFrom)\n        let xBackSlashClipShape = uiXFrame.rect(uiXFrameWidth, 0).move(0, moveFrom)\n\n        let uiXBackSlash = uiXFrame.path('M21.5,6.3c0-0.1,0-0.2,0-0.2c0-0.7,0.5-1.3,1.1-1.5c0.7-0.2,1.5-0.2,2.3,0.1L26.5,5l0.3-1.2L11.5,0.2l-0.3,1.2c1.1,0.2,2.2,0.7,3.1,1.4c1,0.9,1.6,2.1,1.8,3.5l-0.4,81.6c0,0.7,0,2.8,0,3.8l0,1.1c0,0.4-0.1,0.7-0.3,1.1c-0.3,0.5-0.8,0.8-1.3,0.8c-1.2,0.1-2.4,0.1-3.5-0.2l-0.3,1.2l15.2,3.7l0.3-1.2c-2.4-0.6-4.5-1.7-4.6-5.7l0-5.9L21.5,6.3z').fill('#F8F8FB');\n        let uiXFowardSlash = uiXFrame.path('M24.4,1.2L24.1,0L11.9,3.3l0.3,1.2c1.5-0.3,2.9-0.6,3.6-0.5c1.1,0.2,1.5,1,1.8,1.8c0.2,0.9,0.2,1.9,0.2,2.8l-0.1,84c-0.1,2.5-1,3.3-1.9,4c-1,0.8-2.1,1.3-3.3,1.7l0.3,1.2l12.2-3.3l-0.3-1.2c-1.2,0.3-2.5,0.4-3.8,0.3c-0.8,0-1.3-0.9-1.6-1.8c0-0.2-0.1-0.3-0.1-0.5l0-2.6l0.1-83.9C19.2,3.3,21.8,1.9,24.4,1.2z').fill('#F8F8FB');\n\n        uiXBackSlash.clipWith(xBackSlashClipShape);\n        uiXFowardSlash.clipWith(xFowardSlashClipShape);\n\n        // uiXFrame.rect(uiXFrameWidth, 0).move(0, moveFrom).fill({ color: 'red', opacity: 0.1 })\n        // uiXFrame.rect(uiXFrameWidth, 0).move(0, moveFrom).fill({ color: 'red', opacity: 0.1 })\n        return uiXFrame\n    }\n\n\n\n\n    componentWillUnmount = () => {\n        this.removeEventListeners()\n    }\n\n    getAnchorName = (link) => {\n        let anchorName\n        if (this.hasAnchor(link)) {\n            anchorName = link.substring(link.lastIndexOf('#') + 1, link.length)\n        } else {\n            anchorName = defaultLandingPageName\n        }\n        console.log(anchorName);\n        return anchorName\n    }\n\n    validifyAnchorName = () => {\n        if (!this.isAnchorNameValid(this.state.currentPageAnchorName)) {\n            this.setState({ currentPageAnchorName: defaultLandingPageName }, () => {\n                this.moveWrapper(defaultLandingPageName, this.state.currentPageAnchorName)\n                this.changeAddressByAnchor(defaultLandingPageName)\n            })\n        }\n    }\n\n    isAnchorNameValid = (anchorName) => {\n        let isValid\n        this.state.sectionContent.forEach((v, i) => {\n            if (anchorName === v.id) {\n                isValid = true\n            }\n        })\n        return isValid || false\n    }\n\n    removeEventListeners = () => {\n        this.listenerAddCount = 0\n        window.removeEventListener('wheel', this.wheelListener, { passive: false })\n        window.removeEventListener('touchmove', this.touchmoveListener, { passive: false })\n    }\n\n    addEventListeners = () => {\n        window.addEventListener('wheel', this.wheelListener, { passive: false })\n        window.addEventListener('touchmove', this.touchmoveListener, { passive: false })\n    }\n\n    wheelListener = (event) => {\n        event.preventDefault()\n        this.stablizeScroll(event)\n    }\n\n    touchmoveListener = (event) => {\n        event.preventDefault()\n        this.stablizeScreenTouch(event)\n    }\n\n    stablizeScroll = (event) => {\n        let timeNow = new Date().getTime();\n        let enableScrolling = Boolean(timeNow - lastSrollTime > (this.state.touchQuietPeriod + this.state.animationTime));\n        if (enableScrolling) {\n            currentDeltaY = event.deltaY\n            lastSrollTime = timeNow\n            this.onStableScroll()\n            console.log('stablizeScroll');\n\n        }\n    }\n\n    stablizeScreenTouch = (event) => {\n        let timeNow = new Date().getTime()\n        let currentTouchedY = event.changedTouches.item(0).clientY\n        let distence = currentTouchedY - lastTouchLocationY\n        let istTimeToMove = Boolean(timeNow - lastSucesScreenMovedTime > (this.state.scrollQuietPeriod + this.state.animationTime))\n        let isStablizedDistance = distence >= this.state.touchStableConstantNumber || distence <= -this.state.touchStableConstantNumber\n        let _setLastTouchLocation = () => { lastTouchLocationY = istTimeToMove ? currentTouchedY : undefined }\n        let _setLastTouchTime = () => lastSucesScreenMovedTime = timeNow\n        let _resetDistance = () => distence = 0\n        if (isStablizedDistance && istTimeToMove) {\n            let isMoveUp = (distence < 0) ? -1 : 1\n            console.log(distence);\n            _resetDistance()\n            _setLastTouchTime()\n            this.onStableScreenTouch(isMoveUp)\n        }\n        _setLastTouchLocation()\n    }\n\n    onStableScreenTouch = (isMoveUp) => {\n        let thisAnchorName = this.state.currentPageAnchorName\n        this.moveWrapper(thisAnchorName, this.convertPageIndexToAnchorName(this.convertAnchorNameToIndex(thisAnchorName) - isMoveUp) || thisAnchorName)\n        this.changeAnchorNameAndAddress(isMoveUp)\n    }\n\n    onStableScroll = () => {\n        let _getIsDirectionUp = () => {\n            return (currentDeltaY !== 0) ? ((currentDeltaY < 0) ? 1 : -1) : 0\n        }\n        let thisAnchorName = this.state.currentPageAnchorName\n        this.moveWrapper(thisAnchorName, this.convertPageIndexToAnchorName(this.convertAnchorNameToIndex(thisAnchorName) - _getIsDirectionUp()) || thisAnchorName)\n        this.changeAnchorNameAndAddress(_getIsDirectionUp())\n        console.log('onStableScroll');\n    }\n\n    changeAnchorNameAndAddress = (isMoveUp) => {\n        let getCurrentPageIndex = () => {\n            let findingIndex\n            this.state.sectionContent.forEach((v, i) => {\n                if (this.state.currentPageAnchorName === v.id) {\n                    findingIndex = i\n                }\n            })\n            return findingIndex\n        }\n\n        let currentPageIndex = getCurrentPageIndex()\n        let targetAnchorName = this.convertPageIndexToAnchorName(currentPageIndex - isMoveUp) || this.convertPageIndexToAnchorName(currentPageIndex)\n        this.setState({ currentPageAnchorName: targetAnchorName }, () => {\n            this.changeAddressByAnchor(this.state.currentPageAnchorName)\n            console.log(this.state.currentPageAnchorName);\n        })\n    }\n\n    convertPageIndexToAnchorName = (index) => {\n        let anchorName\n        this.state.sectionContent.forEach((v, i) => {\n            if (index === i) {\n                anchorName = v.id\n            }\n        })\n        return anchorName\n    }\n\n    convertAnchorNameToIndex = (anchorName) => {\n        let anchorIndex\n        this.state.sectionContent.forEach((v, i) => {\n            if (anchorName === v.id) {\n                anchorIndex = i\n            }\n        })\n        return anchorIndex\n    }\n\n    changeAddressByAnchor = (anchorName) => {\n        address.assign(this.getRootAddress(address.toString()) + '#' + anchorName)\n    }\n\n    getRootAddress = (link) => {\n        return this.hasAnchor(link) ? link.substring(0, link.lastIndexOf('#')) : link\n\n    }\n\n    hasAnchor = (link) => {\n        console.log(link);\n        let lastIndexOfSlash = link.lastIndexOf(\"/\")\n        console.log(lastIndexOfSlash);\n        let textAfterLastSlash = link.slice(lastIndexOfSlash)\n        console.log(textAfterLastSlash);\n        let isIncludesHash = textAfterLastSlash.includes(\"#\")\n        console.log(isIncludesHash);\n        return isIncludesHash\n    }\n\n    moveWrapper = (fromName, toName) => {\n        console.log('move from: ' + fromName + ' to ' + toName);\n    }\n\n\n    render() {\n        let pageIndex = this.convertAnchorNameToIndex(this.state.currentPageAnchorName)\n        let pagerDistance = pageIndex * -100\n        return (\n            <section id={\"pagerContainer\"} >\n                <div id={\"pageWrapper\"} style={{ transform: 'translateY(' + pagerDistance + 'vh)' }}>\n                    {\n                        this.state.sectionContent.map((v, i) => {\n                            return (\n                                <section className=\"section\" id={'section-' + v.id} key={i}>\n                                    {/* <img src='https://umas-sunavan.github.io/paging-paging/images/resume.jpg' alt=\"forloading\" />\n                                    <img src='../resume.jpg' alt=\"for loading\" /> */}\n                                    <div id=\"lowerText\"></div>\n                                    <div id=\"upperText\"></div>\n\n                                    <h2>{v.id}</h2>\n                                    {this.state.sectionContent.map((vv, ii) => {\n                                        return (<h2 id={v.id + '-to-' + vv.id} key={i + '-' + ii}>{vv.text}</h2>)\n                                    })}\n                                </section>)\n                        })\n                    }\n                </div>\n            </section>\n        )\n    }\n\n}\n\nexport default FullPager;\n\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport './FadeInText.scss'\n\nclass FadeInText extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            origionalText: this.props.innerText,\n            animationType: this.props.animationType,\n            presentSpans: '',\n            letterEachDelay: this.props.letterEachDelay || 50\n            // animation delay : see FadeInText.scss \n        }\n        setTimeout(() => {\n            switch (this.state.animationType) {\n                case 'fadeInBottom':\n                    this.delaySpans();\n                    break;\n                default:\n                    break;\n            }\n        },\n            this.state.animationDelay\n        )\n    }\n\n    componentDidMount = () => {\n        \n    }\n\n    delaySpans = () => {\n        let presentSpans = []\n        let delay = 0\n        let i = 0\n        for (const letter of this.state.origionalText.toString()) {\n            if (letter !== ' ') {\n                presentSpans.push(<span key={this.props.id + '-' + i} style={{ animationDelay: delay + 'ms', MozAnimationDelay: delay + 'ms', WebkitAnimationDelay: delay + 'ms' }}>{letter}</span>)\n                delay += this.state.letterEachDelay;\n            } else {\n                presentSpans.push()\n            }\n            i += 1\n        }\n        this.setState({ presentSpans: presentSpans })\n    }\n    render() {\n        return (\n            <span id={this.props.id} className={'cssanimation leFadeInBottom'}>{this.state.presentSpans}</span>\n        )\n    }\n}\n\nexport default FadeInText;","import React, { Component } from 'react';\nimport './App.css';\nimport SplashScreenCss from './SplashScreen.scss'\nimport FadeInText from './FadeInText';\n\nclass SplashScreen extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            enableChangeColor: false\n        }\n        // this.myTween = null;\n        // this.myElement = null;\n    }\n\n    componentDidMount = () => {\n        setTimeout(() => {\n            this.setState({ enableChangeColor: true })\n        }, 0)\n        // this.myTween = TweenLite.to(this.myElement, 1, {x: 100, y: 100});\n    }\n\n    render() {\n        let bgColor = this.state.enableChangeColor ? 'css-theme-color' : 'css-white-color'\n        return (\n            <section id=\"splash-bg\" className={bgColor}>\n                <h2 id=\"introTextH2\">\n                    <FadeInText id={'introText'} textDelay={1000} animationType={'fadeInBottom'} innerText={'我是蘇桓晨，這是我收藏的作品集，您可以向下瀏覽，或是先。'}></FadeInText>\n                </h2>\n                {/* <h2 ref={h2 => this.myElement = h2} >123</h2> */}\n            </section>\n        )\n    }\n\n}\n\nexport default SplashScreen;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass F extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {  \n        }\n    }\n\n    render() {\n        return (\n            <section>\n                <h1>Feather</h1>\n                <img src=\"/Artboard.png\" \n                srcset='images/Artboard.png 1x, Artboard@2x.png 1.5x , Artboard.png 2x' \n                alt=\"resolution test\"></img>\n\n                <img src=\"/Artboard.png\" \n                srcset='images/Artboard.png 1x, Artboard.png 1.5x , Artboard@2x.png 2x' \n                alt=\"resolution test\"></img>\n            </section>\n            \n        )\n    }\n\n}\n\nexport default F;\n","import React, { Component } from 'react';\nimport './App.css';\nimport SVG from 'svg.js'\n\nclass Ai extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    componentDidMount = () => {\n        var draw = SVG('drawing').size(300, 300)\n        draw.rect(100, 100).move(100, 50).fill('#f06')\n    }\n    render() {\n        return (\n            <section>\n                <h1>About Island</h1>\n                <div id=\"drawing\"></div>\n            </section>\n\n        )\n    }\n\n}\n\nexport default Ai;\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass Coe extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n        }\n    }\n\n    render() {\n        return (\n            <section>\n                <h1>College of Education</h1>\n            </section>\n            \n        )\n    }\n\n}\n\nexport default Coe;\n","import {TimelineMax as Timeline, Power1} from 'gsap';\n\nconst getHomeTimeline = (node, delay) => {\n    const timeline = new Timeline({ paused: true });\n    // const texts = node.querySelectorAll('h1');\n    console.log(document);\n    console.log(document.body);\n    console.log(document.body.querySelector(\"section\"));\n    console.log(document.body.querySelector(\"section\").querySelectorAll('h1'));\n    const texts = document.body.querySelector(\"section\").querySelectorAll('h1');\n    console.log(texts);    \n\n    timeline\n        .from(node, 0, { display: 'none', autoAlpha: 0, delay })\n        .staggerFrom(texts, 0.375, { autoAlpha: 0, x: -25, ease: Power1.easeOut }, 0.125);\n\n    return timeline\n}\n\nconst getDefaultTimeline = (node, delay) => {\n    const timeline = new Timeline({ paused: true });\n    // const texts = node.querySelectorAll('h1');\n    console.log(document);\n    console.log(document.body);\n    console.log(document.body.querySelector(\"section\"));\n    console.log(document.body.querySelector(\"section\").querySelectorAll('h1'));\n    const texts = document.body.querySelector(\"section\").querySelectorAll('h1');\n    console.log(texts);\n\n\n    timeline\n        .from(node, 0, { display: 'none', autoAlpha: 0, delay })\n        .staggerFrom(texts, 0.375, { autoAlpha: 0, x: -25, ease: Power1.easeOut }, 0.125);\n\n    return timeline\n}\n\nconst play = (pathname, node, appears) => {    \n    const delay = appears ? 0 : 0.5\n    let timeline\n    console.log(pathname, node, appears);\n\n    if (pathname === '/')\n        timeline = getHomeTimeline(node, delay)\n    else\n        timeline = getDefaultTimeline(node, delay)\n\n    timeline.play()\n}\n\nexport default play","import React from 'react';\nimport './App.css';\nimport { Switch, Route, NavLink, BrowserRouter } from 'react-router-dom'\nimport FullPager from './FullPager';\nimport F from './F';\nimport Ai from './AI';\nimport Coe from './Coe';\nimport SplashScreen from './SplashScreen';\nimport { TransitionGroup, Transition } from 'react-transition-group'\nimport play from './play'\nimport exit from './exit'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Navbar, Nav, NavDropdown } from 'react-bootstrap';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <header className=\"App-header\">\n\n          <Navbar bg=\"dark\" expand=\"sm\">\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"mr-auto\">\n                <NavLink to=\"/FullPager\" activeClassName=\"selected\">FullPager</NavLink>\n                <NavLink to=\"/Feather\" activeClassName=\"selected\">Feather</NavLink>\n                <NavLink to=\"/About-Island\" activeClassName=\"selected\">About-Island</NavLink>\n                <NavLink to=\"/College-of-Education\" activeClassName=\"selected\">College-of-Education</NavLink>\n                <NavLink exact to=\"/\" activeClassName=\"selected\">Splashscreen</NavLink>\n              </Nav>\n              <Button variant=\"primary\">Primary</Button>\n            </Navbar.Collapse>\n          </Navbar>\n        </header>\n        <Route render={({ location }) => {\n          const { pathname, key } = location;\n          return (\n            <TransitionGroup component={null}>\n              <Transition\n                key={key}\n                appear={true}\n                onEnter={(node, appears) => { \n                  console.log('v3',node, appears);\n                  {/* pass parameter before compomentdidmount() */}\n                  play(pathname, node, appears)\n\n                   }}\n                onExit={(node, appears) => { exit(node, appears) }}\n                timeout={{ enter: 750, exit: 150 }}\n              >\n                {/* <Switch location={location}>\n                  <Route exact path=\"/\" component={SplashScreen} />\n              //  <Route exact path=\"/\" component={Home} />\n                  <Route path=\"/Feather\" component={F} />\n                  <Route path=\"/About-Island\" component={Ai} />\n                  <Route path=\"/College-of-Education\" component={Coe} />\n                  <Route path=\"/FullPager\" component={FullPager} />\n                </Switch> */}\n                <section>\n                  <h1>UIUX</h1>\n                </section>\n              </Transition>\n            </TransitionGroup>\n          )\n        }} />\n      </div>\n    </BrowserRouter>\n  )\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <p>\n  //         Edit <code>src/App.js</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //       <h1>React Router Tutorial</h1>\n  //       <ul role=\"nav\">\n  //         <li><NavLink to=\"/FullPager\" activeClassName=\"selected\">FullPager</NavLink></li>\n  //         <li><NavLink to=\"/splashscreen\" activeClassName=\"selected\">splashscreen</NavLink></li>\n  //         <li><NavLink to=\"/Feather\" activeClassName=\"selected\">Feather</NavLink></li>\n  //         <li><NavLink to=\"/About-Island\" activeClassName=\"selected\">About-Island</NavLink></li>\n  //         <li><NavLink to=\"/College-of-Education\" activeClassName=\"selected\">College-of-Education</NavLink></li>\n  //       </ul>\n  //     </header>\n  //     <div>\n  //       <Route render={(location) => {\n  //         const { pathname, key } = location\n  //         return (\n  //           <TransitionGroup component={null}>\n  //               <Transition\n  //                 key={key}\n  //                 appear={true}\n  //                 onEnter={(node, appears) => {\n  //                   console.log(node);\n\n  //                   play(pathname, node, appears)\n  //                 }}\n  //                 timeout={{enter: 750, exit: 150}}\n  //               >\n  //                 <Switch location={location}>\n  //                   <Route exact path=\"/Home\" component={Home}/>\n  //                 </Switch>\n  //               </Transition>\n  //             </TransitionGroup>\n  //         )\n  //       }}>\n\n  //       </Route>\n  //     </div>\n  //   </div>\n  // );\n\n\n\n  {/* <BrowserRouter>\n      <div className=\"app\">\n        <Route render={({ location }) => {\n          const { pathname, key } = location;\n\n          return (\n            <TransitionGroup component={null}>\n              <Transition\n                key={key}\n                appear={true}\n                onEnter={(node, appears) => {\n                  console.log(node);\n                  \n                  play(pathname, node, appears)\n                }}\n                timeout={{enter: 750, exit: 150}}\n              >\n                <Switch location={location}>\n                  <Route exact path=\"/\" component={Home}/>\n                  <Route path=\"/Feather\" component={F}/>\n                  <Route path=\"/About-Island\" component={Ai} />\n                  <Route path=\"/College-of-Education\" component={Coe} />\n                  <Route path=\"/splashscreen\" component={SplashScreen} />\n                  <Route path=\"/FullPager\" component={FullPager} />\n                </Switch>\n              </Transition>\n            </TransitionGroup>\n          )\n        }}/>\n      </div>\n    </BrowserRouter> */}\n}\n{/* <TransitionGroup component={null}>\n              <Transition\n                key={key}\n                appear={true}\n                onEnter={(node, appears) => {\n                  console.log(node);\n                  play(pathname, node, appears)\n                }\n                }\n                timeout={{ enter: 750, exit: 0 }}\n              >\n                <Switch location={location}>\n                  <Route path=\"/FullPager\" component={FullPager} />\n                  <Route path=\"/Feather\" component={F} />\n                  <Route path=\"/About-Island\" component={Ai} />\n                  <Route path=\"/College-of-Education\" component={Coe} />\n                  <Route path=\"/splashscreen\" component={SplashScreen} />\n                </Switch>\n              </Transition>\n            </TransitionGroup> */}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FullPager from './FullPager';\nimport SplashScreen from './SplashScreen';\nimport { Route, HashRouter, Switch } from 'react-router-dom'\nimport App from './App';\nimport Feather from './F';\nimport Ai from './AI';\nimport Coe from './Coe';\n\n\n\n// ReactDOM.render(\n//     <SplashScreen />, document.getElementById('root')\n// );\n\nReactDOM.render(\n    (\n        <HashRouter>\n            <App/>\n\n            {/* <Route exact path=\"/\" component={App} />\n            <Switch>\n                <Route path=\"/FullPager\" component={FullPager} />\n                <Route path=\"/Feather\" component={Feather} />\n                <Route path=\"/About-Island\" component={Ai} />\n                <Route path=\"/College-of-Education\" component={Coe} />\n                <Route path=\"/splashscreen\" component={SplashScreen} />\n            </Switch> */}\n\n            {/* <Route path=\"/\" component={App}/ >\n            <Route path=\"/FullPager\" component={FullPager} />\n            <Route path=\"/Feather\" component={Feather} />\n            <Route path=\"/About-Island\" component={Ai} />\n            <Route path=\"/College-of-Education\" component={Coe} />\n            <Route path=\"/splashscreen\" component={SplashScreen} /> */}\n\n        </HashRouter>\n    ), document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}